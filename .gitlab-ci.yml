image: ${CI_BASE_IMAGE}:latest

stages:
  # - coding_convention
  # - build_staging
  - deploy_staging
  - build_prod
  - deploy_prod
  - make_merged
  - clean_staging
  - clean_prod

.ruby_setup:
  before_script:
    - bundle install

.docker_setup:
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}

.authenticated_setup:
  script:
    - eval "$(ssh-agent -s)"
    - ssh-add <(echo "${SSH_PRIVATE_KEY}" | base64 -d)

.setup_deployment:
  script:
    - echo "${DATA_ENVIRONMENT}" >> .env
    - scp -o StrictHostKeyChecking=no -r .env ${SERVER_USERNAME}@${SERVER_IP_ADDRESS}:${WORKSPACE}
    - scp -o StrictHostKeyChecking=no -r docker-compose.yml ${SERVER_USERNAME}@${SERVER_IP_ADDRESS}:${WORKSPACE}

.build_setup:
  script:
    - docker build --pull -t "${REGISTRY_IMAGE}" .
    - docker push "${REGISTRY_IMAGE}"
    - echo "Registry image:" ${REGISTRY_IMAGE}

.deployment_script:
  variables:
    DOCKER_COMPOSE_FILE: /${SERVER_USERNAME}/auction-api/docker-compose.yml
  script:
    - ssh -o StrictHostKeyChecking=no ${SERVER_USERNAME}@${SERVER_IP_ADDRESS} "docker pull ${REGISTRY_IMAGE}"
    - ssh -o StrictHostKeyChecking=no ${SERVER_USERNAME}@${SERVER_IP_ADDRESS} "docker-compose -f ${DOCKER_COMPOSE_FILE} up -d"

.clean_build:
  script:
    - ssh -o StrictHostKeyChecking=no ${SERVER_USERNAME}@${SERVER_IP_ADDRESS} "docker image prune -a -f"

.update_compose:
  script:
    - sed -i "s/__REGISTRY_IMAGE__/${DOCKER_COMPOSE_IMAGE}/" docker-compose.yml

# coding_convention:
#   stage: coding_convention
#   before_script:
#     - echo "Check coding convention using rubocop"
#     - !reference [.ruby_setup, before_script]
#   script:
#     - bundle exec rubocop .
#   when: always

# build_staging:
#   stage: build_staging
#   image: docker:latest
#   variables:
#     REGISTRY_IMAGE: ${CI_REGISTRY_IMAGE}/staging
#   services:
#     - name: docker:19.03.8-dind
#   before_script:
#     - !reference [.docker_setup, script]
#   script:
#     - !reference [.build_setup, script]
#   when: on_success
#   only:
#     - staging

build_prod:
  stage: build_prod
  image: docker:latest
  variables:
    REGISTRY_IMAGE: ${CI_REGISTRY_IMAGE}
  services:
    - name: docker:19.03.8-dind
  before_script:
    - !reference [.docker_setup, script]
  script:
    - !reference [.build_setup, script]
  when: on_success
  only:
    - master

deploy_staging:
  stage: deploy_staging
  image: kroniak/ssh-client
  variables:
    DATA_ENVIRONMENT: ${STAGING_ENVIRONMENT}
    SERVER_USERNAME: ${STAGING_USERNAME}
    SERVER_IP_ADDRESS: ${STAGING_IP_ADDRESS}
    REGISTRY_IMAGE: ${CI_REGISTRY_IMAGE}/staging
    DOCKER_COMPOSE_IMAGE: ${STAGING_COMPOSE_IMAGE}
    WORKSPACE: /${STAGING_USERNAME}/auction-api
  before_script:
    - echo "Auto deploying api for production environment"
    - !reference [.authenticated_setup, script]
    - !reference [.update_compose, script]
    - !reference [.setup_deployment, script]
  script:
    - !reference [.deployment_script, script]
  when: on_success
  only:
    - staging

deploy_prod:
  stage: deploy_prod
  image: kroniak/ssh-client
  variables:
    DATA_ENVIRONMENT: ${PROD_ENVIRONMENT}
    SERVER_USERNAME: ${PROD_USERNAME}
    SERVER_IP_ADDRESS: ${PROD_IP_ADDRESS}
    REGISTRY_IMAGE: ${CI_REGISTRY_IMAGE}
    DOCKER_COMPOSE_IMAGE: ${PROD_COMPOSE_IMAGE}
    WORKSPACE: /${PROD_USERNAME}/auction-api
  before_script:
    - echo "Auto deploying api for production environment"
    - !reference [.authenticated_setup, script]
    - !reference [.update_compose, script]
    - !reference [.setup_deployment, script]
  script:
    - !reference [.deployment_script, script]
  when: manual
  only:
    - master

make_merged:
  stage: make_merged
  script:
    - HOST=${CI_PROJECT_URL} CI_PROJECT_ID=${CI_PROJECT_ID} CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} GITLAB_USER_ID=${GITLAB_USER_ID} PRIVATE_TOKEN=${PRIVATE_TOKEN} $CI_PROJECT_DIR/auto-merged.sh
  when: on_success
  only:
    - staging

clean_staging:
  stage: clean_staging
  image: kroniak/ssh-client
  variables:
    SERVER_USERNAME: ${STAGING_USERNAME}
    SERVER_IP_ADDRESS: ${STAGING_IP_ADDRESS}
  before_script:
    - !reference [.authenticated_setup, script]
  script:
    - !reference [.clean_build, script]
  when: on_success
  only:
    - staging

clean_prod:
  stage: clean_prod
  image: kroniak/ssh-client
  variables:
    SERVER_USERNAME: ${PROD_USERNAME}
    SERVER_IP_ADDRESS: ${PROD_IP_ADDRESS}
  before_script:
    - !reference [.authenticated_setup, script]
  script:
    - !reference [.clean_build, script]
  when: on_success
  only:
    - master